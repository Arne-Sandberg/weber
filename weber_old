#!/usr/bin/env python3
"""
Weber
"""

import sys, readline, re, random
from source import log
from source import lib

lib.reload_config()

from source import weber
from source import commands
from source.proxy import *
from source.lib import exit_program

# get first target
try:
    dump_file = None
    init_target = sys.argv[1]
    if init_target == '--restore':
        dump_file = sys.argv[2]
        log.info('Restoring saved session \'%s\'...' % dump_file)
except:
    log.err('Usage: %s example.com\n           %s --restore dump.web' % (sys.argv[0], 
                                                                         sys.argv[0]))
    exit_program(-1, None)


# motd
log.newline()
log.info(weber.motd[random.randint(0, len(weber.motd)-1)])

# restore dump if necessary and start proxy
if dump_file:
    import pickle
    with open(dump_file, 'rb') as f:
        loaded_data = pickle.load(f)
        init_target = loaded_data[0]
        weber.proxy = Proxy(init_target)
        
        weber.config, weber.rrdb, weber.tdb, weber.mapping, weber.events, weber.spoof_files, weber.spoof_request_regexs, weber.spoof_response_regexs, weber.brute, weber.forward_fail_uris, weber.servers = loaded_data[1:]
        
        #weber.protocols,
        #weber.commands,
        #weber.analysis,
        weber.rrdb.setup_lock()
        weber.tdb.setup_lock()
        weber.mapping.setup_lock()


else: # run new proxy
    weber.proxy = Proxy(init_target)
weber.proxy.start()

while True:
    # get command
    try:
        cmd = input(log.prompt).strip()
    except EOFError: # Ctrl+D -> quit
        log.newline()
        lib.exit_program(None, None)
    if len(cmd) == 0:
        continue
    # quit?
    if lib.quitstring(cmd):
        log.warn('Do you really want to quit? ', new_line=False)
        if lib.positive(input()):
            lib.exit_program(None, None)
    # do command
    else:
        commands.run_command(cmd)

